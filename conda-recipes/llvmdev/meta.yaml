{% if ppc64le %}

# ppc64le has numerous problems in LLVM 8, so use 7.1
{% set shortversion = "7.1" %}
{% set version = "7.1.0" %}
{% set sha256_llvm = "1bcc9b285074ded87b88faaedddb88e6b5d6c331dfcfb57d7f3393dd622b3764" %}
{% set sha256_lld = "a10f274a0a09408eaf9c088dec6fb2254f7d641221437763c94546cbfe595867" %}
{% set build_number = "0" %}

{% else %}

{% set shortversion = "8.0" %}
{% set version = "8.0.0" %}
{% set sha256_llvm = "8872be1b12c61450cacc82b3d153eab02be2546ef34fa3580ed14137bb26224c" %}
{% set sha256_lld = "9caec8ec922e32ffa130f0fb08e4c5a242d7e68ce757631e425e9eba2e1a6e37" %}
{% set build_number = "0" %}

{% endif %}

package:
  name: llvmdev
  version: {{ version }}

source:
  - url: http://llvm.org/releases/{{ version }}/llvm-{{ version }}.src.tar.xz
    fn: llvm-{{ version }}.src.tar.xz
    sha256: {{ sha256_llvm }}
    patches:
    - ../partial-testing.patch
    # Intel SVML optimizations
    # The second part of this patch was published as:
    # https://reviews.llvm.org/D53035
    # (the first, as mentioned in the patch itself, was:
    # https://reviews.llvm.org/D47188)
    # the patch in HEAD only applies on llvm 8
    {{ '- ../D47188-svml-VF.patch' if shortversion == '8.0' else '' }}
    # undefined behavior bug due to Twine usage, this is fixed in llvm 8
    {{ '- ../twine_cfg_undefined_behavior.patch' if shortversion == '7.1' else '' }}
    # Reverts a patch limiting non-GlobalValue name length
    - ../0001-Revert-Limit-size-of-non-GlobalValue-name.patch
  - url: http://llvm.org/releases/{{ version }}/lld-{{ version }}.src.tar.xz
    fn: lld-{{ version }}.src.tar.xz
    sha256: {{ sha256_lld }}
    folder: tools/lld

build:
  number: {{ build_number }}
  script_env:
    - PY_VCRUNTIME_REDIST
  ignore_run_exports:
    # Is static-linked
    - xar

requirements:
  build:
    # We cannot do this on macOS or windows
    # OSX already has llvm so has to be handled
    # at build.sh time
    # Windows needs to build using vs2015_runtime
    # irrespective of python version
    - {{ compiler('c') }} # [unix and not (armv6l or armv7l or aarch64)]
    - {{ compiler('cxx') }} # [unix and not (armv6l or armv7l or aarch64)]
    - cmake # [not (armv6l or armv7l)]
    # Needed to unpack the source tarball
    - m2w64-xz  # [py27 and win]
    # ninja not currently used, bld.bat needs an update
    - ninja  # [win]
    # Needed to build LLVM
    - python >=3
    # need vs2015_runtime to build, do not want it at run time
    # as extensions for py27 need vs2008
    - vs2015_runtime # [win]
    - make # [unix and not (armv6l or armv7l or aarch64)]
  host:
    # needed for llc at runtime
    - zlib # [not win]
    - xar # [osx]
    # llvm-lit testing needs *a* python
    - python # [not (armv6l or armv7l or aarch64 or win)]

test:
  requires:
    - python
  files:
    - cfg_test.ll
    - numba-3016.ll
    - test_cfg_dot.py
  commands:
    - $PREFIX/bin/llvm-config --libs                         # [not win]
    - $PREFIX/bin/llc -version                               # [not win]

    - if not exist %LIBRARY_INC%\\llvm\\Pass.h exit 1        # [win]
    - if not exist %LIBRARY_LIB%\\LLVMSupport.lib exit 1     # [win]

    - test -f $PREFIX/include/llvm/Pass.h                    # [unix]
    - test -f $PREFIX/lib/libLLVMSupport.a                   # [unix]

    - test -f $PREFIX/lib/libLLVMCore.a                      # [not win]
    # Test for Twine bug
    - $PREFIX/bin/opt -dot-cfg cfg_test.ll -o cfg.testme.tmp # [not win]
    - python test_cfg_dot.py                                 # [not win]

    # LLD tests
    - ld.lld --version                                       # [unix]
    - lld-link /?                                            # [win]

about:
  home: http://llvm.org/
  dev_url: https://github.com/llvm-mirror/llvm
  license: NCSA
  license_file: LICENSE.TXT
  summary: Development headers and libraries for LLVM
